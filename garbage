















void letsgo_mitm(t_malcolm *mlcml)
/*
 * Sends an ARP who-has request to dst_ip
 * on interface ifindex, using source mac src_mac and source ip src_ip.
 */
int letsgo_mitm(int fd, int ifindex, const unsigned char *src_mac, uint32_t src_ip, uint32_t dst_ip)
{
    int err = -1;
    unsigned char buffer[BUF_SIZE];
    memset(buffer, 0, sizeof(buffer));

    struct sockaddr_ll socket_address;
    socket_address.sll_family = AF_PACKET;
    socket_address.sll_protocol = htons(ETH_P_ARP);
    socket_address.sll_ifindex = ifindex;
    socket_address.sll_hatype = htons(ARPHRD_ETHER);
    socket_address.sll_pkttype = (PACKET_BROADCAST);
    socket_address.sll_halen = MAC_LENGTH;
    socket_address.sll_addr[6] = 0x00;
    socket_address.sll_addr[7] = 0x00;

    struct ethhdr *send_req = (struct ethhdr *) buffer;
    struct arp_header *arp_req = (struct arp_header *) (buffer + ETH2_HEADER_LEN);
    int index;
    ssize_t ret, length = 0;

    //Broadcast
    memset(send_req->h_dest, 0xff, MAC_LENGTH);

    //Target MAC zero
    memset(arp_req->target_mac, 0x00, MAC_LENGTH);

    //Set source mac to our MAC address
    memcpy(send_req->h_source, src_mac, MAC_LENGTH);
    memcpy(arp_req->sender_mac, src_mac, MAC_LENGTH);
    memcpy(socket_address.sll_addr, src_mac, MAC_LENGTH);

    /* Setting protocol of the packet */
    send_req->h_proto = htons(ETH_P_ARP);

    /* Creating ARP request */
    arp_req->hardware_type = htons(HW_TYPE);
    arp_req->protocol_type = htons(ETH_P_IP);
    arp_req->hardware_len = MAC_LENGTH;
    arp_req->protocol_len = IPV4_LENGTH;
    arp_req->opcode = htons(ARP_REQUEST);

    debug("Copy IP address to arp_req");
    memcpy(arp_req->sender_ip, &src_ip, sizeof(uint32_t));
    memcpy(arp_req->target_ip, &dst_ip, sizeof(uint32_t));

    ret = sendto(fd, buffer, 42, 0, (struct sockaddr *) &socket_address, sizeof(socket_address));
    if (ret == -1) {
        perror("sendto():");
        goto out;
    }
    err = 0;
out:
    return err;
}
// {
	// dire a source que target ip est a local mac @
	// dire a target que source ip est a local mac @
	// send_arp_pkt(mlcml->socket, mlcml->arphdr.source_ip, mlcml->arphdr.target_ip, mlcml->mac_laddr);
	// send_arp_pkt(mlcml->socket, mlcml->arphdr.target_ip, mlcml->arphdr.target_ip, mlcml->mac_laddr);


// }











	// localHost = gethostbyname("");
	// inet_addr(localIP);
	// for (int i = 0; localHost->h_addr_list[i]; ++i)
	// {
		// printf("%s\n", localHost->h_addr);
	// }
// if (!(host = gethostbyname(mlcml->ifap->ifa_name)))
				// printf("{%hu}\n", ntohs(mlcml->ifap->ifa_addr->sa_data));
			// printf("%s          [%s]\n"
// ,mlcml->ifap->ifa_name, host->h_name);
			// for (int i = 0; host->h_addr_list[i]; ++i)
			// {
				// printf("%s %s\n",host->h_addr_list[i], host->h_name);
			// }
			// local = gethostbyname("");
			// inet_addr()// static void create_socket(t_malcolm *mlcml)
// {
//     int t;
// ,m->arphdr.source_mac[0][0]
// 	,m->arphdr.source_mac[0][1]
// 	,m->arphdr.source_mac[1][0]
// 	,m->arphdr.source_mac[1][1]
// 	,m->arphdr.source_mac[2][0]
// 	,m->arphdr.source_mac[2][1]
// 	,m->arphdr.source_mac[3][0]
// 	,m->arphdr.source_mac[3][1]
// 	,m->arphdr.source_mac[4][0]
// 	,m->arphdr.source_mac[4][1]
// 	,m->arphdr.source_mac[5][0]
// 	,m->arphdr.source_mac[5][1]
// 	,m->arphdr.source_ip[0]
// 	,m->arphdr.source_ip[1]
// 	,m->arphdr.source_ip[2]
// 	,m->arphdr.source_ip[3]
// 	,m->arphdr.target_mac[0][0]
// 	,m->arphdr.target_mac[0][1]
// 	,m->arphdr.target_mac[1][0]
// 	,m->arphdr.target_mac[1][1]
// 	,m->arphdr.target_mac[2][0]
// 	,m->arphdr.target_mac[2][1]
// 	,m->arphdr.target_mac[3][0]
// 	,m->arphdr.target_mac[3][1]
// 	,m->arphdr.target_mac[4][0]
// 	,m->arphdr.target_mac[4][1]
// 	,m->arphdr.target_mac[5][0]
// 	,m->arphdr.target_mac[5][1]
// 	,m->arphdr.target_ip[0]
// 	,m->arphdr.target_ip[1]
// 	,m->arphdr.target_ip[2]
// 	,m->arphdr.target_ip[3]);
//     t = 1;
//     if ((mlcml->socket = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ARP))) <= 0)
//         ft_perror("socket", "can't create socket", 32, 42);
 	// if (setsockopt(pg->socket, IPPROTO_IP, IP_HDRINCL, &t, sizeof(int)))
  //           ft_perror("setsockopt", "can't set IP_HDRINCL on socket", 32, 42);

  //   if (setsockopt(pg->socket, SOL_IP, SO_RCVTIMEO, (char*)&timeout, sizeof(timeout)) < 0)
  //       ft_perror("setsockopt", "can't set IP_HDRINCL on socket", 32, 42);
// }// #include "ft_ping.h"

sudo ./ft_malcolm 10.12.255.255 ff:bb:ff:ff:ee:ff 10.12.10.22 "10:dd:b1:**:**:**"

// static int is_ip(char *str, int flag)
// {
// 	int c;

// 	c = 0;
// 	if (flag == AF_INET)
// 	{
// 		if (!ft_isnum(str)  || ft_strlen(str) > 4)
// 			return (0);
// 		c = ft_atoi(str);
// 		if (c >= 0 && c <= 255)
// 			return (1);
// 	}
// 	else if (flag == AF_INET6)
// 	{
// 		while (str[c])
// 		{
// 			if ((c < 'a' || c > 'f') && (c < 'A' || c > 'F')
// 					&& (c < '0' && c > '9'))
// 				return (0);
// 			c++;
// 		}
// 		return (1);
// 	}
// 	return (0);
// }

// static int check_is_ip(char *arg, int flag, char *split)
// {
// 	char **tab;
// 	int c;

// 	c = 0;
// 	tab = ft_strsplit(arg, split);
// 	while (tab[c])
// 	{
// 		if (flag == AF_INET6 && !tab[c + 1])
// 			if (is_ip(tab[c], AF_INET))
// 				return (assign_fqdn_fam(tab, pg, arg, AF_INET6));
// 		if (!is_ip(tab[c], flag))
// 			return (assign_fqdn_fam(tab, pg, arg, 0));
// 		c++;
// 	} 
// 	return (assign_fqdn_fam(tab, pg, arg, flag));
// }

// while (arg[j] != '.')
		// {
		// 	if (!ft_isdigit(arg[i]))
		// 		malcolm_usage(arg, "bad ip");
		// 	byte[j] = arg[i + j + dot];
		// 	res[i] = arg[i + j + dot];
		// 	j++;
		// }
		// if (dot >= 3)
		// 	malcolm_usage(arg, "bad dot nbr");
		// dot++;
		// i += j;
	// char *res = NULL;
			// if (res == NULL)
			// 	res = ft_strsub(byte, 0, j);
			// else
			// {
			// 	res = ft_strjoinf(res, ".", 1);
			// 	res = ft_strjoinf(res, byte, 1);
			// }


	//while (arg[i])
	// {
	// 	if (j < 3 && ft_isdigit(arg[i]))
	// 	{
	// 		byte[j] = arg[i];
	// 		i++;
	// 		j++;
	// 	}
	// 	else if (dot < 3 && arg[i] == '.')
	// 	{
	// 		dot++;
	// 		tmp = ft_atoi(byte);
	// 		if (tmp > 255)
	// 			malcolm_usage(byte, "> 255");
	// 		i++;
	// 		j = 0;
	// 	}
	// 	else
	// 		malcolm_usage(byte, "> 255");
	// }